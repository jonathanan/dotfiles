" vim:foldmethod=marker:foldlevel=0
" 'zR/zM' to open/close all folds, 'za' to toggle open/close a fold

" ----------------------------------------------------------------------------
"   .vimrc                                                                {{{
" ----------------------------------------------------------------------------

" Allow vim to break compatibility with vi
set nocompatible " This must be first, because it changes other options

" }}}-------------------------------------------------------------------------
"   Plugin                                                                {{{
" ----------------------------------------------------------------------------

" Installing the Plug plugin manager, and all the plugins are included in this
" other file.
source $HOME/.vim/plug.vim

" }}}-------------------------------------------------------------------------
"   Base Options                                                          {{{
" ----------------------------------------------------------------------------

" Set the leader key to <space> instead of \ because it's easier to reach
let mapleader = "\<Space>"
set encoding=utf-8                " I generally want utf-8 encoding
set clipboard^=unnamed            " Use system clipboard
set hidden                        " Allow buffers with unsaved changes to exist in background
set backspace=indent,eol,start    " Allow backspaceing over autoindent, line breaks, starts of insert
set shortmess+=I                  " No welcome screen
set shortmess+=A                  " No .swp warning
set history=200                   " Remember the last 200 :ex commands
set timeoutlen=500                " Timeout for key code or mapped sequence to complete
if exists("&wildignorecase")      " Ignore case when completing file names and directories.
    set wildignorecase
endif
set spell                         " Spell checking, press 'z=' over misspelled word to replace with suggestion

" Faster Escape in normal/command mode
imap jj <Esc>
cmap jj <C-c>

" Map ctrl-movement keys to window switching
map <C-k> <C-w><Up>
map <C-j> <C-w><Down>
map <C-l> <C-w><Right>
map <C-h> <C-w><Left>

" }}}-------------------------------------------------------------------------
"   Visual                                                                {{{
" ----------------------------------------------------------------------------

" Control Area
set wildmenu          " Command completion
set laststatus=2      " The last windows will have a status line always
set ruler             " Show the line and column number of the cursor postion, seperated by a comma.
set lazyredraw        " Don't update the screen while executing macros/commands
set showtabline=1     " Show tabline only if there are at least 2 tab pages

" Buffer Area
set scrolloff=8       " Minimal number of screen lines to keep above and below the cursor
set visualbell        " Use a visual bell, don't beep!
set cursorline        " Highlight the current line
set guicursor+=i:blinkon1 " Enable cursor shape and blink on for insert mode
set number            " Set line numbers
set relativenumber    " Set relative line numbers
set nowrap            " Do not wrap at the windows width
set list listchars=tab:\ \ ,precedes:«,extends:» " Highlight tabs and trailing spaces, Indicate off window text
set sidescroll=1      " Scroll by 1 character when reaching end of window
set sidescrolloff=12  " Start side scrolling when only 12 characters remain in window
set textwidth=80      " Break lines at 80 characters
set synmaxcol=1024    " Syntax coloring lines that are too long slows down vim
set virtualedit=block " Allow virtual editing in visual block mode

" Folding
set foldcolumn=0      " Show 0 folding column
set foldlevelstart=10 " Open 10 levels of folding when I open a file
set foldnestmax=10    " Limit to 10 nested folds
set foldmethod=marker " Fold on {{{ }}}

" Splits
set splitbelow        " Open new split below
set splitright        " Open new vertical split to the right

" Character meaning when present in 'formatoptions'
" ------ ---------------------------------------
" t Auto-wrap text using textwidth (does not apply to comments)
" c Auto-wrap comments using textwidth, inserting the current comment leader automatically.
" r Automatically insert the current comment leader after hitting <Enter> in Insert mode.
" o Automatically insert the current comment leader after hitting 'o' or 'O' in Normal mode
" q Allow formatting of comments with "gq".
" n Recognize numbered lists
" j Where it makes sense, remove a comment leader when joining lines
set formatoptions=tcroqnj


" }}}-------------------------------------------------------------------------
"   Searching                                                             {{{
" ----------------------------------------------------------------------------

set incsearch      " Show search results as we type
set showmatch      " Show matching brackets
set hlsearch       " Highlight search results
set ignorecase     " Ignore case when searching
set smartcase      " Don't ignore case if we have a capital letter

" Use 'very magic' regex for searches, :help magic
nnoremap / /\v
vnoremap / /\v
nnoremap ? ?\v
vnoremap ? ?\v

" Toggle word highlighting
nmap <silent> <leader>hw :call <SID>hlwordon()<CR>
nmap <silent> <leader>hW :call <SID>hlwordoff()<CR>

" Search with '/', Replace with 'cgn', <Esc>, Repeat search + replace with 'n.'
" builtin at 7.4.110

" Search selected text
vnoremap <leader>/ y/<C-R>"<CR>

" }}}-------------------------------------------------------------------------
"   Tabs                                                                  {{{
" ----------------------------------------------------------------------------

set tabstop=4          " Show a tab as four spaces
set shiftwidth=4       " Reindent is also four spaces
set softtabstop=4      " When hit <tab> use four columns
set expandtab          " Create spaces when I type <tab>
set autoindent         " Put my cursor in the right place when I start a new line

" }}}-------------------------------------------------------------------------
"   Custom Commands                                                       {{{
" ----------------------------------------------------------------------------

" Faster save and quit
nmap <silent> <leader>w :w<CR>
nmap <silent> <leader>wa :wa<CR>
nmap <silent> <leader>q :q<CR>
nmap <silent> <leader>Q :q!<CR>
nmap <silent> <leader>qa :qa<CR>

" sudo save
command W w !sudo tee % > /dev/null
nmap <silent> <leader>W :W<CR>

" Turn off highlights
nmap <silent> <leader>noh :noh<CR>

" Press 'qq' to record into q register, End recording with 'q', '<leader>.' to
" play recording
nnoremap <leader>. @q

" Replace current word and all of its occurences
nnoremap <leader>rw :%s/\<<C-r><C-w>\>/
vnoremap <leader>rw y:%s/<C-r>"/

" Easier editing of the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>

" Set the current working directory to the directory of the opened file
nmap <silent> <leader>cd :lcd %:p:h<CR>:pwd<CR>

" Open the current working directory in a file explorer
if has('win32')
    nmap <silent> <leader>od :exe '!start explorer "'. shellescape(getcwd()) .'"'<CR>
endif

" Toggle diff
nmap <silent> <leader>d :if &diff<bar>diffoff<bar>else<bar>diffthis<bar>endif<CR>

" }}}-------------------------------------------------------------------------
"   Custom Mappings                                                       {{{
" ----------------------------------------------------------------------------

" F<N> Mappings
" <F1> :FzfHelpTags
" <F2> Toggle FZF preview window
" <F3> FZF insert mode snippets
nmap <F4> :set invnumber<CR>:set invrelativenumber<CR>
nmap <F5> :GitGutterToggle<CR>
nmap <F6> :ToggleStripWhitespaceOnSave<CR>
nnoremap <F7> :set invpaste paste?<CR>
set pastetoggle=<F7>

" Line Shortcuts
" Move to the beginning/end of line
nnoremap H ^
nnoremap L $

" Yank to the end of the line instead of the entire line
map Y y$

" Insert line break in normal mode
nnoremap <CR> i<CR><ESC>

" Automatically jump to end of pasted text
vnoremap <silent> y y`]
vnoremap <silent> p p`]
nnoremap <silent> p p`]

" Jump to end of the current line in insert mode
inoremap <C-e> <C-o>$

" Buffers
nmap <leader>k :bnext<CR>
nmap <leader>j :bprevious<CR>
nmap <leader>x :bp <BAR> bd #<CR>

" Enter visual line mode
nmap <leader><leader> V

" Don't use 'Ex' Mode, and it's annoying to leave
noremap Q <nop>

" }}}-------------------------------------------------------------------------
"   Custom Functions                                                      {{{
" ----------------------------------------------------------------------------

function! s:hlwordon()
    call s:hlwordoff()
    let w:hlword = expand('<cword>')
    let w:hlwordmatch = matchadd('Search', '\<'. w:hlword .'\>' )

    " Set the search register so that n and N can be used to find additional
    " occurrences of the word.
    let @/ = '\<'. w:hlword .'\>'
endfunction

function! s:hlwordoff()
    if exists('w:hlwordmatch')
        call matchdelete( w:hlwordmatch )
        unlet w:hlwordmatch
        unlet w:hlword
    endif
endfunction

" }}}-------------------------------------------------------------------------
"   Autogroups                                                            {{{
" ----------------------------------------------------------------------------

augroup configgroup
    autocmd!
    autocmd FileType ruby setlocal tabstop=2
                                 \ shiftwidth=2
                                 \ softtabstop=2
                                 \ commentstring=#\ %s
    autocmd FileType yaml setlocal tabstop=2
                                 \ shiftwidth=2
                                 \ softtabstop=2
    autocmd FileType tf setlocal tabstop=2
                                 \ shiftwidth=2
                                 \ softtabstop=2
    autocmd BufEnter *.hcl setlocal tabstop=2
                                 \ shiftwidth=2
                                 \ softtabstop=2
    autocmd BufEnter *.sh setlocal tabstop=2
                                 \ shiftwidth=2
                                 \ softtabstop=2
    autocmd FileType python setlocal commentstring=#\ %s
    autocmd BufRead,BufNewFile *.py setlocal foldmethod=indent
    autocmd BufRead,BufNewFile Jenkinsfile setfiletype groovy
augroup END

" }}}-------------------------------------------------------------------------
"   Configure Plugins                                                     {{{
" ----------------------------------------------------------------------------

" nerdtree {{{
map <leader>nt :NERDTreeToggle<CR>
let NERDTreeShowHidden=1   " Show hidden files, toggle with I

"Auto open NERDTree if vim starts up with no files specified
"autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

"Close vim if NERDTree is only window left open
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" }}}

" nerdcommenter {{{
" map = for comment toggling
map <silent> = <leader>c<space>
let g:NERDDefaultAlign = 'left'
" }}}

" ale {{{
let g:ale_lint_on_enter = 0
let g:airline#extensions#ale#enabled = 1

" inline message
let g:ale_virtualtext_cursor = 1

let g:ale_sign_error = 'x'
let g:ale_sign_warning = '!!'

augroup my_ale_signs
    au!
    autocmd ColorScheme *
        \ hi AleVirtualTextError ctermfg=red |
        \ hi AleVirtualTextWarning ctermfg=yellow |
        \ hi AleVirtualTextInfo ctermfg=blue |
        \ hi AleVirtualTextStyleError ctermfg=red |
        \ hi AleVirtualTextStyleWarning ctermfg=yellow |
augroup END
" }}}

" vim-gitgutter {{{
"map <F5> :GitGutterToggle<CR>
" }}}

" fzf.vim {{{
nnoremap <silent> <leader>o :Files<CR>
nnoremap <silent> <leader>O :Files!<CR>
nnoremap <silent> <leader>b :Buffers<CR>
" [Buffers] Jup to the existing window if possible
let g:fzf_buffers_jump=1

cnoremap <silent> <C-p> :History<CR>
cnoremap <silent> <C-P> <ESC>:History/<CR>
nnoremap <silent> <leader>` :Marks<CR>
noremap <silent> <leader>; :Commands<CR>
noremap <silent> <leader>l :Blines<CR>
"inoremap <silent> <F3> <ESC>:Snippets<CR>
nnoremap <silent> <F1> :Helptags<CR>
inoremap <silent> <F1> <ESC>:Helptags<CR>
nnoremap <leader>rg :Rg<CR>
" git ls-files
nmap <leader>gls :GFiles<CR>
" git status
nmap <leader>gs :GFiles?<CR>

" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-l> <plug>(fzf-complete-line)

" fzf.Tags uses existing 'tags' file or generates it otherwise
nnoremap <silent> <leader>t :Tags<CR>
xnoremap <silent> <leader>t "zy:Tags <C-r>z<CR>

" fzf.BTags generate tags on-fly for current file
nnoremap <silent> <leader>T :BTags<CR>
xnoremap <silent> <leader>T "zy:BTags <C-r>z<CR>

" Advanced customization using Vim function
inoremap <expr> <c-x><c-k> fzf#vim#complete#word({'left': '15%'})

" Replace the default dictionary completion with fzf-based fuzzy completion
inoremap <expr> <c-x><c-k> fzf#vim#complete('cat /usr/share/dict/words')

" hide status line
autocmd! FileType fzf set laststatus=0 noshowmode noruler
  \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler
" }}}

" better-whitespace {{{
" nmap <F6> :ToggleStripWhitespaceOnSave<CR>
let g:strip_whitespace_on_save = 1
let g:better_whitespace_filetypes_blacklist = ['markdown']
command! SWS :StripWhitespace
" }}}

"coc.nvim {{{
" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
"set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes

" Make <tab> used for trigger completion, completion confirm, snippet expand and jump like VSCode.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

let g:coc_snippet_next = '<tab>'

" Use <C-j>, <C-k> to select next/previous snippet.
inoremap <expr><C-j> pumvisible() ? "\<C-n>" : "\<C-l>"
inoremap <expr><C-k> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-r> to trigger completion.
inoremap <silent><expr> <c-r> coc#refresh()

let g:coc_global_extensions = [
  \ 'coc-go',
  \ 'coc-json',
  "\ 'coc-pairs',
  \ 'coc-prettier',
  \ 'coc-python',
  \ 'coc-snippets',
  \ 'coc-ultisnips',
  \ 'coc-yaml',
  \ ]

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType yaml,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current line.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Introduce function text object
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <TAB> for selections ranges.
" NOTE: Requires 'textDocument/selectionRange' support from the language server.
" coc-tsserver, coc-python are the examples of servers that support it.
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Run `:Prettier` to pretty format file
command! -nargs=0 Prettier :CocCommand prettier.formatFile

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
let g:lightline = {
  \ 'colorscheme': 'ayu_dark',
  \ 'active': {
  \   'left': [ [ 'mode', 'paste' ],
  \             [ 'cocstatus', 'readonly', 'filename', 'gitbranch', 'modified' ] ]
  \ },
  \ 'component_function': {
  \   'cocstatus': 'coc#status',
  \   'gitbranch': 'FugitiveHead'
  \ },
\ }
" Use autocmd to force lightline update.
autocmd User CocStatusChange,CocDiagnosticChange call lightline#update()

" Mappings using CoCList:
" Show all diagnostics.
nnoremap <silent> <space><space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent> <space><space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent> <space><space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent> <space><space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent> <space><space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space><space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space><space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent> <space><space>p  :<C-u>CocListResume<CR>
" }}}

" vim-whitenight {{{
colorscheme whitenight
:hi CursorLine ctermbg=NONE guibg=NONE
:hi LineNr ctermbg=NONE guibg=NONE
:hi CursorLineNr ctermbg=NONE guibg=NONE
" }}}

" markdown-preview.nvim {{{
" Usage <leader>md or :MarkdownPreview
nmap <leader>md <Plug>MarkdownPreviewTogglemap
" }}}

" vim-go {{{
let g:go_def_mode='gopls'
let g:go_info_mode='gopls'
" }}}

" vim-terraform/terraform-completion {{{
let g:terraform_fold_sections=1
let g:terraform_fmt_on_save=1
" }}}

" }}}-------------------------------------------------------------------------
"   Backup, Swap, and Undo file locations                                 {{{
" ----------------------------------------------------------------------------

" Don't leave .swp files everywhere. Put them in a central place
set directory=$HOME/.vim/swapdir//
set backupdir=$HOME/.vim/backupdir//
if exists('+undodir')
    set undodir=$HOME/.vim/undodir
    set undofile
endif

" }}}-------------------------------------------------------------------------
"   Source local .vimrc                                                   {{{
" ----------------------------------------------------------------------------
if filereadable(glob("$HOME/.vimrc.local"))
    source $HOME/.vimrc.local
endif

" }}}-------------------------------------------------------------------------
" ----------------------------------------------------------------------------

set modelines=1
