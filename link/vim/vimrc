" vim:foldmethod=marker:foldlevel=0
" 'zR/zM' to open/close all folds, '<leader>a' or 'za' to toggle open/close a fold

" ----------------------------------------------------------------------------
"   .vimrc                                                                {{{
" ----------------------------------------------------------------------------

" Allow vim to break compatibility with vi
set nocompatible " This must be first, because it changes other options

" }}}-------------------------------------------------------------------------
"   Plugin                                                                {{{
" ----------------------------------------------------------------------------

" Installing the Plug plugin manager, and all the plugins are included in this
" other file.
source $HOME/.vim/plug.vim

" }}}-------------------------------------------------------------------------
"   Base Options                                                          {{{
" ----------------------------------------------------------------------------

" Set the leader key to <space> instead of \ because it's easier to reach
let mapleader = "\<Space>"
set encoding=utf-8                " I generally want utf-8 encoding
set clipboard^=unnamed            " Use system clipboard
set hidden                        " Allow buffers with unsaved changes to exist in background
set backspace=indent,eol,start    " Allow backspaceing over autoindent, line breaks, starts of insert
set shortmess+=I                  " No welcome screen
set shortmess+=A                  " No .swp warning
set history=200                   " Remember the last 200 :ex commands
set timeoutlen=500                " Timeout for key code or mapped sequence to complete
if exists("&wildignorecase")      " Ignore case when completing file names and directories.
    set wildignorecase
endif
set spell                         " Spell checking, press 'z=' over misspelled word to replace with suggestion

" Faster Escape in normal/command mode
imap jj <Esc>
cmap jj <C-c>

" Map ctrl-movement keys to window switching
map <C-k> <C-w><Up>
map <C-j> <C-w><Down>
map <C-l> <C-w><Right>
map <C-h> <C-w><Left>

" }}}-------------------------------------------------------------------------
"   Visual                                                                {{{
" ----------------------------------------------------------------------------

" Control Area
set wildmenu          " Command completion
set laststatus=2      " The last windows will have a status line always
set ruler             " Show the line and column number of the cursor postion, seperated by a comma.
set lazyredraw        " Don't update the screen while executing macros/commands
set showtabline=1     " Show tabline only if there are at least 2 tab pages

" Buffer Area
set scrolloff=8       " Minimal number of screen lines to keep above and below the cursor
set visualbell        " Use a visual bell, don't beep!
set cursorline        " Highlight the current line
set guicursor+=i:blinkon1 " Enable cursor shape and blink on for insert mode
set number            " Set line numbers
set relativenumber    " Set relative line numbers
set nowrap            " Do not wrap at the windows width
set list listchars=tab:\ \ ,precedes:«,extends:» " Highlight tabs and trailing spaces, Indicate off window text
set sidescroll=1      " Scroll by 1 character when reaching end of window
set sidescrolloff=12  " Start side scrolling when only 12 characters remain in window
set textwidth=80      " Break lines at 80 characters
set synmaxcol=1024    " Syntax coloring lines that are too long slows down vim
set virtualedit=block " Allow virtual editing in visual block mode

" Folding
set foldcolumn=1      " Show 1 folding column
set foldlevelstart=10 " Open 10 levels of folding when I open a file
set foldnestmax=10    " Limit to 10 nested folds
set foldmethod=marker " Fold on {{{ }}}
nnoremap <leader>a za " Toggle folding

" Splits
set splitbelow        " Open new split below
set splitright        " Open new vertical split to the right

" Character meaning when present in 'formatoptions'
" ------ ---------------------------------------
" t Auto-wrap text using textwidth (does not apply to comments)
" c Auto-wrap comments using textwidth, inserting the current comment leader automatically.
" r Automatically insert the current comment leader after hitting <Enter> in Insert mode.
" o Automatically insert the current comment leader after hitting 'o' or 'O' in Normal mode
" q Allow formatting of comments with "gq".
" n Recognize numbered lists
" j Where it makes sense, remove a comment leader when joining lines
set formatoptions=tcroqnj


" }}}-------------------------------------------------------------------------
"   Searching                                                             {{{
" ----------------------------------------------------------------------------

set incsearch      " Show search results as we type
set showmatch      " Show matching brackets
set hlsearch       " Highlight search results
set ignorecase     " Ignore case when searching
set smartcase      " Don't ignore case if we have a capital letter

" Use 'very magic' regex for searches, :help magic
nnoremap / /\v
vnoremap / /\v
nnoremap ? ?\v
vnoremap ? ?\v

" Toggle word highlighting
nmap <silent> <leader>hw :call <SID>hlwordon()<CR>
nmap <silent> <leader>hW :call <SID>hlwordoff()<CR>

" Search with '/', Replace with 'cs', <Esc>, Repeat search + replace with 'n.'
vnoremap <silent> s //e<C-r>=&selection=='exclusive'?'+1':''<CR><CR>
    \:<C-u>call histdel('search',-1)<Bar>let @/=histget('search',-1)<CR>gv
omap s :normal vs<CR>

" Search selected text
vnoremap <leader>/ y/<C-R>"<CR>

" }}}-------------------------------------------------------------------------
"   Tabs                                                                  {{{
" ----------------------------------------------------------------------------

set tabstop=4          " Show a tab as four spaces
set shiftwidth=4       " Reindent is also four spaces
set softtabstop=4      " When hit <tab> use four columns
set expandtab          " Create spaces when I type <tab>
set autoindent         " Put my cursor in the right place when I start a new line

" }}}-------------------------------------------------------------------------
"   Custom Commands                                                       {{{
" ----------------------------------------------------------------------------

" Faster save and quit
nmap <silent> <leader>w :w<CR>
nmap <silent> <leader>wa :wa<CR>
nmap <silent> <leader>q :q<CR>
nmap <silent> <leader>Q :q!<CR>
nmap <silent> <leader>qa :qa<CR>

" sudo save
command W w !sudo tee % > /dev/null
nmap <silent> <leader>W :W<CR>

" Turn off highlights
nmap <silent> <leader>noh :noh<CR>

" Press 'qq' to record into q register, End recording with 'q', '<leader>.' to
" play recording
nnoremap <leader>. @q

" Replace current word and all of its occurences
nnoremap <leader>rw :%s/\<<C-r><C-w>\>/
vnoremap <leader>rw y:%s/<C-r>"/

" Easier editing of the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>

" Set the current working directory to the directory of the opened file
nmap <silent> <leader>cd :lcd %:p:h<CR>:pwd<CR>

" Open the current working directory in a file explorer
if has('win32')
    nmap <silent> <leader>od :exe '!start explorer "'. shellescape(getcwd()) .'"'<CR>
endif

" Toggle diff
nmap <silent> <leader>d :if &diff<bar>diffoff<bar>else<bar>diffthis<bar>endif<CR>

" }}}-------------------------------------------------------------------------
"   Custom Mappings                                                       {{{
" ----------------------------------------------------------------------------

" F<N> Mappings
map <F1> :NERDTreeToggle<CR>
map <F2> :GitGutterToggle<CR>
nmap <F3> :set invnumber<CR>:set invrelativenumber<CR>
let g:ctrlp_map = '<F4>'
" <F5> Once CtrlP is open: purge the cache for the current directory to get new files, remove deleted files and apply new ignore options.
nmap <F6> :ToggleStripWhitespaceOnSave<CR>
nnoremap <F7> :set invpaste paste?<CR>
set pastetoggle=<F7>

" Line Shortcuts
" Move to the beginning/end of line
nnoremap H ^
nnoremap L $

" Yank to the end of the line instead of the entire line
map Y y$

" Insert line break in normal mode
nnoremap <CR> i<CR><ESC>

" Automatically jump to end of pasted text
vnoremap <silent> y y`]
vnoremap <silent> p p`]
nnoremap <silent> p p`]

" Jump to end of the current line in insert mode
inoremap <C-e> <C-o>$

" Buffers
nmap <leader>t :enew<CR>
nmap <leader>k :bnext<CR>
nmap <leader>j :bprevious<CR>
nmap <leader>x :bp <BAR> bd #<CR>

" Enter visual line mode
nmap <leader><leader> V

" Don't use 'Ex' Mode, and it's annoying to leave
noremap Q <nop>

" }}}-------------------------------------------------------------------------
"   Custom Functions                                                      {{{
" ----------------------------------------------------------------------------

function! s:hlwordon()
    call s:hlwordoff()
    let w:hlword = expand('<cword>')
    let w:hlwordmatch = matchadd('Search', '\<'. w:hlword .'\>' )

    " Set the search register so that n and N can be used to find additional
    " occurrences of the word.
    let @/ = '\<'. w:hlword .'\>'
endfunction

function! s:hlwordoff()
    if exists('w:hlwordmatch')
        call matchdelete( w:hlwordmatch )
        unlet w:hlwordmatch
        unlet w:hlword
    endif
endfunction

" }}}-------------------------------------------------------------------------
"   Autogroups                                                            {{{
" ----------------------------------------------------------------------------

augroup configgroup
    autocmd!
    autocmd FileType ruby setlocal tabstop=2
                                 \ shiftwidth=2
                                 \ softtabstop=2
                                 \ commentstring=#\ %s
    autocmd FileType yaml setlocal tabstop=2
                                 \ shiftwidth=2
                                 \ softtabstop=2
    autocmd BufEnter *.sh setlocal tabstop=2
                                 \ shiftwidth=2
                                 \ softtabstop=2
    autocmd FileType python setlocal commentstring=#\ %s
    autocmd BufRead,BufNewFile *.py setlocal foldmethod=indent
    autocmd BufRead,BufNewFile Jenkinsfile setfiletype groovy
augroup END

" }}}-------------------------------------------------------------------------
"   Configure Plugins                                                     {{{
" ----------------------------------------------------------------------------

" nerdtree {{{
"map <F1> :NERDTreeToggle<CR>
map <leader>nt <F1>
let NERDTreeShowHidden=1   " Show hidden files, toggle with I

"Auto open NERDTree if vim starts up with no files specified
"autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

"Close vim if NERDTree is only window left open
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" }}}

" nerdcommenter {{{
" map = for comment toggling
map <silent> = <leader>c<space>
let g:NERDDefaultAlign = 'left'
" }}}

" syntastic {{{
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" Use Neomake automatically instead, optionally use syntastic
let g:syntastic_mode_map = {
  \ "mode": "passive",
  \ "active_filetypes": [],
  \ "passive_filetypes": [] }
"let g:syntastic_mode_map = { 'active_filetypes': ['python', 'python3', 'ruby'] }
let g:syntastic_python_checkers = ['flake8']
nmap <leader>sc :SyntasticCheck<CR>
nmap <leader>st :SyntasticToggleMode<CR>
nmap <leader>sr :SyntasticReset<CR>
nmap <leader>sn :lnext<CR>
nmap <leader>sp :lprevious<CR>
" }}}

" neomake {{{
" Run Neomake automatically when writing (no delay).
call neomake#configure#automake('w')

let g:neomake_serialize = 1
let g:neomake_serialize_abort_on_error = 1
let g:neomake_open_list = 2

augroup my_neomake_signs
    au!
    autocmd ColorScheme *
        \ hi NeomakeErrorSign ctermfg=red |
        \ hi NeomakeWarningSign ctermfg=yellow |
        \ hi NeomakeMessageSign ctermfg=blue |
        \ hi NeomakeInfoSign ctermfg=blue |
        \ hi NeomakeVirtualtextError ctermfg=red |
        \ hi NeomakeVirtualtextWarning ctermfg=yellow |
        \ hi NeomakeVirtualtextMessage ctermfg=blue |
        \ hi NeomakeVirtualtextInfo ctermfg=blue
augroup END

" }}}

" vim-gitgutter {{{
"map <F2> :GitGutterToggle<CR>
" }}}

" ctrlp.vim {{{
"let g:ctrlp_map = '<F4>'
nmap <leader>p <F4>
nmap <silent> <leader>b :CtrlPBuffer<CR>
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_show_hidden = 1

" Don't jump to already open window. This is annoying if you are maintaining several Tab workspaces and want to open two windows into the same file.
let g:ctrlp_switch_buffer = 0

if executable('ag')
    " Use ag in CtrlP for listing files. Respects .gitignore
    let g:ctrlp_user_command = 'ag %s -l --hidden --ignore .git --nocolor -g ""'

    " ag is fast enough that CtrlP doesn't need to cache
    let g:ctrlp_use_caching = 0

    " g:ctrlp_custom_ignore does not work, use .agignore
    " g:ctrlp_show_hidden does not work
else
    "Fall back to using git ls-files if Ag is not available
    let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']

    " Ignore certain files
    let g:ctrlp_custom_ignore = {
        \ 'dir':  '\v[\/]\.(git)$',
        \ 'file': '\v\.(exe|so|dll)$',
        \ }
endif
" }}}

" better-whitespace {{{
" nmap <F6> :ToggleStripWhitespaceOnSave<CR>
let g:strip_whitespace_on_save = 1
let g:better_whitespace_filetypes_blacklist = ['markdown']
command! SWS :StripWhitespace
" }}}

" ag.vim {{{
nnoremap <leader>ag :Ag<Space>
" }}}

" YouCompleteMe {{{
let g:ycm_key_list_select_completion   = ['<C-j>', '<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-k>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'
" }}}

" ultisnips {{{
let g:UltiSnipsExpandTrigger='<tab>'
let g:UltiSnipsJumpForwardTrigger="<C-j>"
let g:UltiSnipsJumpBackwardTrigger="<C-k>"
" }}}

" vim-whitenight {{{
colorscheme whitenight
" }}}

" vim-preview {{{
" Usage: <leader>P or ':Preview'
" }}}

" }}}-------------------------------------------------------------------------
"   Backup, Swap, and Undo file locations                                 {{{
" ----------------------------------------------------------------------------

" Don't leave .swp files everywhere. Put them in a central place
set directory=$HOME/.vim/swapdir//
set backupdir=$HOME/.vim/backupdir//
if exists('+undodir')
    set undodir=$HOME/.vim/undodir
    set undofile
endif

" }}}-------------------------------------------------------------------------
"   Source local .vimrc                                                   {{{
" ----------------------------------------------------------------------------
if filereadable(glob("$HOME/.vimrc.local"))
    source $HOME/.vimrc.local
endif

" }}}-------------------------------------------------------------------------
" ----------------------------------------------------------------------------

set modelines=1
